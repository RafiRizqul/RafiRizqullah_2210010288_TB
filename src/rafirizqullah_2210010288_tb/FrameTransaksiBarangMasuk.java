/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rafirizqullah_2210010288_tb;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author ACER
 */
public class FrameTransaksiBarangMasuk extends javax.swing.JFrame {

    /**
     * Creates new form FrameMasterBarang
     */
    public FrameTransaksiBarangMasuk() {
        initComponents();
        loadTableData();
        loadComboBoxData();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTransaksi = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jDateChooserTanggalTransaksi = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSpinnerJumlah = new javax.swing.JSpinner();
        jComboBoxPilihBarang = new javax.swing.JComboBox<>();
        jComboBoxPilihSupplier = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 500));

        jTableTransaksi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableTransaksi.setPreferredSize(new java.awt.Dimension(500, 500));
        jTableTransaksi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableTransaksiMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableTransaksi);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("Tanggal Transaksi");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Pilih Barang");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Pilih Supplier");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel5.setText("Jumlah");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        jPanel1.add(jLabel5, gridBagConstraints);

        jDateChooserTanggalTransaksi.setDate(new java.util.Date());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel1.add(jDateChooserTanggalTransaksi, gridBagConstraints);

        jButton1.setText("Buat Transaksi");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jButton2.setText("Update Transaksi");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);

        jButton3.setText("Hapus Transaksi");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);

        jButton4.setText("Clear");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(jPanel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPanel1.add(jSpinnerJumlah, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPanel1.add(jComboBoxPilihBarang, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPanel1.add(jComboBoxPilihSupplier, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // Ambil data dari form
            String namaBarang = (String) jComboBoxPilihBarang.getSelectedItem();  // Ambil Nama Barang dari ComboBox
            String namaSupplier = (String) jComboBoxPilihSupplier.getSelectedItem();  // Ambil Nama Supplier dari ComboBox

            // Cari ID Barang dan Supplier berdasarkan nama yang dipilih
            int idBarang = getIdBarangByNama(namaBarang);
            int idSupplier = getIdSupplierByNama(namaSupplier);
            int jumlahMasuk = (int) jSpinnerJumlah.getValue();  // Ambil jumlah barang dari Spinner
            double totalHarga = jumlahMasuk * getHargaBarang(idBarang);  // Hitung total harga berdasarkan jumlah dan harga barang
            java.util.Date tanggalTransaksi = jDateChooserTanggalTransaksi.getDate();  // Ambil tanggal transaksi

            // Validasi input
            if (idBarang == 0 || idSupplier == 0 || jumlahMasuk <= 0 || tanggalTransaksi == null) {
                javax.swing.JOptionPane.showMessageDialog(this, "Harap lengkapi semua data!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Konversi tanggal ke java.sql.Date
            java.sql.Date sqlTanggalTransaksi = new java.sql.Date(tanggalTransaksi.getTime());

            // Simpan ke database
            try (Connection conn = DatabaseHelper.getConnection()) {
                String query = "INSERT INTO transaksi_barang_masuk (tanggal_transaksi, id_barang, id_supplier, jumlah_masuk, total_harga) VALUES (?, ?, ?, ?, ?)";
                try (PreparedStatement stmt = conn.prepareStatement(query)) {
                    stmt.setDate(1, sqlTanggalTransaksi);
                    stmt.setInt(2, idBarang);
                    stmt.setInt(3, idSupplier);
                    stmt.setInt(4, jumlahMasuk);
                    stmt.setDouble(5, totalHarga);

                    int rowsInserted = stmt.executeUpdate();
                    if (rowsInserted > 0) {
                        javax.swing.JOptionPane.showMessageDialog(this, "Transaksi berhasil disimpan!", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        loadTableData();  // Muat ulang data tabel setelah insert
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Gagal menyimpan transaksi: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton1ActionPerformed
    private double getHargaBarang(int idBarang) {
        double harga = 0;
        try (Connection conn = DatabaseHelper.getConnection()) {
            String query = "SELECT harga_satuan FROM master_barang WHERE id_barang = ?";
            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setInt(1, idBarang);
                ResultSet rs = stmt.executeQuery();
                if (rs.next()) {
                    harga = rs.getDouble("harga_satuan");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return harga;
    }

    private int getIdBarangByNama(String namaBarang) {
        int id = 0;
        try (Connection conn = DatabaseHelper.getConnection()) {
            String query = "SELECT id_barang FROM master_barang WHERE nama_barang = ?";
            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setString(1, namaBarang);
                ResultSet rs = stmt.executeQuery();
                if (rs.next()) {
                    id = rs.getInt("id_barang");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return id;
    }

    private int getIdSupplierByNama(String namaSupplier) {
        int id = 0;
        try (Connection conn = DatabaseHelper.getConnection()) {
            String query = "SELECT id_supplier FROM master_supplier WHERE nama_supplier = ?";
            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setString(1, namaSupplier);
                ResultSet rs = stmt.executeQuery();
                if (rs.next()) {
                    id = rs.getInt("id_supplier");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return id;
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // Ambil baris yang dipilih di JTable
            int selectedRow = jTableTransaksi.getSelectedRow();
            if (selectedRow == -1) {
                javax.swing.JOptionPane.showMessageDialog(this, "Pilih transaksi yang ingin diupdate!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Ambil idTransaksi dari JTable (ID transaksi berada di kolom pertama)
            int idTransaksi = (int) jTableTransaksi.getValueAt(selectedRow, 0);

            // Ambil data dari form
            // Ambil data dari form
            String namaBarang = (String) jComboBoxPilihBarang.getSelectedItem();
            String namaSupplier = (String) jComboBoxPilihSupplier.getSelectedItem();

            // Cari ID Barang dan Supplier berdasarkan nama yang dipilih
            int idBarang = getIdBarangByNama(namaBarang);
            int idSupplier = getIdSupplierByNama(namaSupplier);
            int jumlahMasuk = (int) jSpinnerJumlah.getValue();  // Ambil jumlah barang dari Spinner
            double totalHarga = jumlahMasuk * getHargaBarang(idBarang);  // Hitung total harga berdasarkan jumlah dan harga barang
            java.util.Date tanggalTransaksi = jDateChooserTanggalTransaksi.getDate();  // Ambil tanggal transaksi

            // Validasi input
            if (idBarang == 0 || idSupplier == 0 || jumlahMasuk <= 0 || tanggalTransaksi == null) {
                javax.swing.JOptionPane.showMessageDialog(this, "Harap lengkapi semua data!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Konversi tanggal ke java.sql.Date
            java.sql.Date sqlTanggalTransaksi = new java.sql.Date(tanggalTransaksi.getTime());

            // Update data di database
            try (Connection conn = DatabaseHelper.getConnection()) {
                String query = "UPDATE transaksi_barang_masuk SET tanggal_transaksi = ?, id_barang = ?, id_supplier = ?, jumlah_masuk = ?, total_harga = ? WHERE id_transaksi = ?";
                try (PreparedStatement stmt = conn.prepareStatement(query)) {
                    stmt.setDate(1, sqlTanggalTransaksi);
                    stmt.setInt(2, idBarang);
                    stmt.setInt(3, idSupplier);
                    stmt.setInt(4, jumlahMasuk);
                    stmt.setDouble(5, totalHarga);
                    stmt.setInt(6, idTransaksi);

                    int rowsUpdated = stmt.executeUpdate();
                    if (rowsUpdated > 0) {
                        javax.swing.JOptionPane.showMessageDialog(this, "Transaksi berhasil diupdate!", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        loadTableData(); // Refresh tabel
                    } else {
                        javax.swing.JOptionPane.showMessageDialog(this, "Transaksi tidak ditemukan atau gagal diupdate!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

            // Mengosongkan semua field input setelah update
            jComboBoxPilihBarang.setSelectedIndex(0);
            jComboBoxPilihSupplier.setSelectedIndex(0);
            jSpinnerJumlah.setValue(0);
            jDateChooserTanggalTransaksi.setDate(null);

            // Menghapus selection di JTable
            jTableTransaksi.clearSelection();

        } catch (Exception e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Gagal mengupdate transaksi: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // Ambil baris yang dipilih di JTable
            int selectedRow = jTableTransaksi.getSelectedRow();
            if (selectedRow == -1) {
                javax.swing.JOptionPane.showMessageDialog(this, "Pilih transaksi yang ingin dihapus!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Konfirmasi penghapusan
            int confirm = javax.swing.JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus transaksi ini?", "Konfirmasi", javax.swing.JOptionPane.YES_NO_OPTION);
            if (confirm != javax.swing.JOptionPane.YES_OPTION) {
                return;
            }

            // Ambil idTransaksi dari JTable
            int idTransaksi = (int) jTableTransaksi.getValueAt(selectedRow, 0);

            // Hapus data transaksi dari database
            try (Connection conn = DatabaseHelper.getConnection()) {
                String query = "DELETE FROM transaksi_barang_masuk WHERE id_transaksi = ?";
                try (PreparedStatement stmt = conn.prepareStatement(query)) {
                    stmt.setInt(1, idTransaksi);

                    int rowsDeleted = stmt.executeUpdate();
                    if (rowsDeleted > 0) {
                        javax.swing.JOptionPane.showMessageDialog(this, "Transaksi berhasil dihapus!", "Sukses", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        loadTableData(); // Refresh tabel
                    } else {
                        javax.swing.JOptionPane.showMessageDialog(this, "Transaksi tidak ditemukan atau gagal dihapus!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

            // Mengosongkan semua field input (jika diperlukan)
            jComboBoxPilihBarang.setSelectedIndex(0);
            jComboBoxPilihSupplier.setSelectedIndex(0);
            jSpinnerJumlah.setValue(0);
            jDateChooserTanggalTransaksi.setDate(null);

            // Menghapus selection di JTable
            jTableTransaksi.clearSelection();

        } catch (Exception e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Gagal menghapus transaksi: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Mengosongkan semua field input
        jComboBoxPilihBarang.setSelectedIndex(0);  // Reset ComboBox Barang
        jComboBoxPilihSupplier.setSelectedIndex(0);  // Reset ComboBox Supplier
        jSpinnerJumlah.setValue(0);  // Reset Spinner Jumlah
        jDateChooserTanggalTransaksi.setDate(null);  // Reset Tanggal Transaksi

        // Menghapus selection di JTable
        jTableTransaksi.clearSelection();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTableTransaksiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTransaksiMouseClicked
// Ambil baris yang dipilih
        int selectedRow = jTableTransaksi.getSelectedRow();

        // Pastikan ada baris yang dipilih
        if (selectedRow != -1) {
            // Ambil data dari JTable dan set ke input form
            jDateChooserTanggalTransaksi.setDate((java.sql.Date) jTableTransaksi.getValueAt(selectedRow, 1));  // Kolom kedua adalah tanggalTransaksi
            String namaBarang = (String) jTableTransaksi.getValueAt(selectedRow, 2);  // Kolom ketiga adalah namaBarang
            String namaSupplier = (String) jTableTransaksi.getValueAt(selectedRow, 3);  // Kolom keempat adalah namaSupplier
            Integer jumlahMasuk = (Integer) jTableTransaksi.getValueAt(selectedRow, 4);  // Kolom kelima adalah jumlahMasuk

            // Set value ke form input
            jComboBoxPilihBarang.setSelectedItem(namaBarang);  // Set ComboBox Barang berdasarkan Nama
            jComboBoxPilihSupplier.setSelectedItem(namaSupplier);  // Set ComboBox Supplier berdasarkan Nama
            jSpinnerJumlah.setValue(jumlahMasuk);  // Set Jumlah Barang Masuk
        }
    }//GEN-LAST:event_jTableTransaksiMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameTransaksiBarangMasuk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameTransaksiBarangMasuk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameTransaksiBarangMasuk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameTransaksiBarangMasuk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameTransaksiBarangMasuk().setVisible(true);
            }
        });
    }

    private void loadTableData() {
        try (Connection conn = DatabaseHelper.getConnection()) {
            String query = "SELECT t.id_transaksi, t.tanggal_transaksi, b.nama_barang, s.nama_supplier, t.jumlah_masuk, t.total_harga "
                    + "FROM transaksi_barang_masuk t "
                    + "JOIN master_barang b ON t.id_barang = b.id_barang "
                    + "JOIN master_supplier s ON t.id_supplier = s.id_supplier";
            try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
                ResultSetMetaData metaData = rs.getMetaData();
                int columnCount = metaData.getColumnCount();

                javax.swing.table.DefaultTableModel tableModel = new javax.swing.table.DefaultTableModel();

                // Menambahkan kolom ke tabel sesuai dengan nama kolom dari hasil query
                for (int i = 1; i <= columnCount; i++) {
                    tableModel.addColumn(metaData.getColumnLabel(i));
                }

                // Menambahkan baris ke tabel untuk setiap record yang diambil
                while (rs.next()) {
                    Object[] row = new Object[columnCount];

                    // Mengambil data dari ResultSet, pastikan konversi ke tipe yang sesuai
                    row[0] = rs.getInt("id_transaksi");  // id_transaksi
                    row[1] = rs.getDate("tanggal_transaksi");  // tanggal_transaksi
                    row[2] = rs.getString("nama_barang");  // nama_barang
                    row[3] = rs.getString("nama_supplier");  // nama_supplier
                    row[4] = rs.getInt("jumlah_masuk");  // jumlah_masuk sebagai Integer
                    row[5] = rs.getDouble("total_harga");  // total_harga

                    tableModel.addRow(row);
                }

                // Menetapkan model tabel ke jTableTransaksi
                jTableTransaksi.setModel(tableModel);
            }
        } catch (Exception e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Gagal memuat data: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadComboBoxData() {
        // Mengisi ComboBox untuk Barang
        try (Connection conn = DatabaseHelper.getConnection()) {
            String queryBarang = "SELECT id_barang, nama_barang FROM master_barang";
            try (PreparedStatement stmt = conn.prepareStatement(queryBarang);
                    ResultSet rsBarang = stmt.executeQuery()) {
                // Menghapus item sebelumnya
                jComboBoxPilihBarang.removeAllItems();

                while (rsBarang.next()) {
                    int idBarang = rsBarang.getInt("id_barang");
                    String namaBarang = rsBarang.getString("nama_barang");
                    jComboBoxPilihBarang.addItem(namaBarang);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Gagal memuat data barang: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

        // Mengisi ComboBox untuk Supplier
        try (Connection conn = DatabaseHelper.getConnection()) {
            String querySupplier = "SELECT id_supplier, nama_supplier FROM master_supplier";
            try (PreparedStatement stmt = conn.prepareStatement(querySupplier);
                    ResultSet rsSupplier = stmt.executeQuery()) {
                // Menghapus item sebelumnya
                jComboBoxPilihSupplier.removeAllItems();

                while (rsSupplier.next()) {
                    int idSupplier = rsSupplier.getInt("id_supplier");
                    String namaSupplier = rsSupplier.getString("nama_supplier");
                    jComboBoxPilihSupplier.addItem(namaSupplier);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Gagal memuat data supplier: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBoxPilihBarang;
    private javax.swing.JComboBox<String> jComboBoxPilihSupplier;
    private com.toedter.calendar.JDateChooser jDateChooserTanggalTransaksi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerJumlah;
    private javax.swing.JTable jTableTransaksi;
    // End of variables declaration//GEN-END:variables
}
